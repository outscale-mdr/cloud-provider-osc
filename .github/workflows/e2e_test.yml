name: e2e_test

on:
  pull_request_target:
    branches:
      - OSC-MIGRATION
    paths:
      - "**.go"
      - "Dockerfile"
      - "Makefile"
      - "go.*"
      - "deploy/k8s-osc-ccm/**.yaml"
  push:
    branches: [ OSC-MIGRATION ]
    paths:
      - "**.go"
      - "Dockerfile"
      - "Makefile"
      - "go.*"
      - "deploy/k8s-osc-ccm/**.yaml"
      - ".github/workflows/e2e_test.yml"
  workflow_dispatch:
    
jobs:
  create_cluster:
    runs-on: [self-hosted, linux]
    steps:
    # Retrieve the code from the repo (UNSAFE)
    - uses: actions/checkout@v2
      with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
    - uses: actions/checkout@v2
      with:
        repository: 'outscale-dev/osc-k8s-rke-cluster'
        path: "set-up-rke-cluster"
    - uses: azure/setup-kubectl@v2.0
    - uses: azure/setup-helm@v1
    - uses: actions/setup-python@v2
    - uses: outscale-dev/frieza-github-actions/frieza-clean@master
      with:
        access_key: ${{ secrets.OSC_ACCESS_KEY }}
        secret_key: ${{ secrets.OSC_SECRET_KEY }}
        region: ${{ secrets.OSC_REGION }}
    - name: Install osc-cli
      run: pip install osc-sdk
    - name: Configure osc-cli
      run: |
        apt install -y jq
        mkdir -p $HOME/.osc
        jq --null-input --arg accesskey "$osc_access_key" --arg secretkey "$osc_secret_key" --arg region "$osc_region" '{"default": {"access_key" : $accesskey, "secret_key": $secretkey, "region_name": $region, "host": "outscale.com", "https": true, "method": "POST"}}' > $HOME/.osc/config.json
      env:
        osc_access_key: ${{ secrets.OSC_ACCESS_KEY }}
        osc_secret_key: ${{ secrets.OSC_SECRET_KEY }}
        osc_region: ${{ secrets.OSC_REGION }}
    - name: Deploy Cluster
      uses: outscale-dev/osc-k8s-rke-cluster/github_actions/deploy_cluster@master
      with:
        repository_folder: "set-up-rke-cluster"
        osc_access_key: ${{ secrets.OSC_ACCESS_KEY }}
        osc_secret_key: ${{ secrets.OSC_SECRET_KEY }}
        osc_region: ${{ secrets.OSC_REGION }}
        will_install_ccm: "true"
        rke_version: "v1.3.12"
        kubernetes_version: "v1.23.7-rancher1-1"
        bastion_vm_type: "tinav5.c4r8p1"
        bastion_volume_type: "io1"
        bastion_volume_size: 30
        bastion_iops: 1500
        control_plane_vm_type: "tinav5.c4r8p1"
        control_plane_count: 1
        control_plane_volume_type: "io1"
        control_plane_volume_size: 30
        control_plane_iops: 1500
        worker_vm_type: "tinav5.c4r8p1"
        worker_count: 1
        worker_volume_type: "io1"
        worker_volume_size: 30
        worker_iops: 1500
    - name: Wait to access the cluster
      uses: nick-invision/retry@v2
      with:
        timeout_seconds: 60
        max_attempts: 10
        command: kubectl get nodes
      env:
        KUBECONFIG: set-up-rke-cluster/rke/kube_config_cluster.yml
    - name: Deploy Docker-registry into cluster
      run: |
        ansible-playbook addons/docker-registry/playbook.yaml
        ./addons/docker-registry/start_port_forwarding.sh &
      env:
        KUBECONFIG: rke/kube_config_cluster.yml
        ANSIBLE_CONFIG: ansible.cfg
      working-directory: set-up-rke-cluster
    - name: Push the Docker image
      run: |
        make build-image
        docker tag osc/cloud-provider-osc:$VERSION localhost:4242/osc/cloud-provider-osc:$VERSION
        docker push localhost:4242/osc/cloud-provider-osc:$VERSION
        docker image prune -a -f
      env:
        VERSION: ${{ format('{0}.{1}', github.sha, github.run_attempt) }}
    - name: Retrieve NodePort Ip and NodePort
      run: |
        echo nodeport_port=$(kubectl get --namespace default -o jsonpath="{.spec.ports[0].nodePort}" services docker-registry) >> $GITHUB_ENV
        echo nodeport_ip=$(kubectl get nodes --namespace default -o jsonpath="{.items[0].status.addresses[0].address}")  >> $GITHUB_ENV
      env:
        KUBECONFIG: set-up-rke-cluster/rke/kube_config_cluster.yml
    - name: Install CCM
      run: |
        kubectl apply -f set-up-rke-cluster/addons/ccm/secrets.yaml
        helm install --wait --wait-for-jobs k8s-osc-ccm deploy/k8s-osc-ccm --set oscSecretName=osc-secret --set image.repository=${nodeport_ip}:${nodeport_port}/osc/cloud-provider-osc --set image.tag=${VERSION}
      env:
        KUBECONFIG: set-up-rke-cluster/rke/kube_config_cluster.yml
        VERSION: ${{ format('{0}.{1}', github.sha, github.run_attempt) }}
    - name: Run e2e tests
      env:
        OSC_ACCESS_KEY: ${{ secrets.OSC_ACCESS_KEY }}
        OSC_SECRET_KEY: ${{ secrets.OSC_SECRET_KEY }}
      run: bash -c "KC=$(base64 -w 0 set-up-rke-cluster/rke/kube_config_cluster.yml) make test-e2e"
    - name: Wait that all resources have been released (for ex SG ELB)
      uses: nick-invision/retry@v2
      with:
        timeout_seconds: 60
        max_attempts: 10
        command: |
          test "$(osc-cli api ReadSecurityGroups --Filters "{\"TagKeys\": [\"OscK8sClusterID/$cluster_name\"]}" | jq -r '.SecurityGroups | length')" = "1"
    - name: Uninstall CCM
      run: |
        kubectl delete -f set-up-rke-cluster/addons/ccm/secrets.yaml
        helm uninstall --wait k8s-osc-ccm
      env:
        KUBECONFIG: set-up-rke-cluster/rke/kube_config_cluster.yml
    - name: Destroy Cluster
      uses: outscale-dev/osc-k8s-rke-cluster/github_actions/destroy_cluster@master
      if: ${{ always() }}
      with:
        repository_folder: "set-up-rke-cluster"
        osc_access_key: ${{ secrets.OSC_ACCESS_KEY }}
        osc_secret_key: ${{ secrets.OSC_SECRET_KEY }}
        osc_region: ${{ secrets.OSC_REGION }}
